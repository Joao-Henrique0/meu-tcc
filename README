# App de Gerenciamento de Tarefas com Chatbot e NLP

Este projeto √© um aplicativo de gerenciamento de tarefas integrado a um chatbot inteligente, que permite a cria√ß√£o, atualiza√ß√£o, exclus√£o e listagem de tarefas por comandos de voz ou texto em linguagem natural. 

O sistema √© composto por:

- üì± Um aplicativo **Flutter** (front-end)
- ‚öôÔ∏è Um **back-end em Python** com **Flask** e **NLP com spaCy + TensorFlow**
- üîê Autentica√ß√£o e banco de dados via **Supabase**
- üîî Notifica√ß√µes locais programadas

---

## Pr√©-requisitos

- [Flutter](https://docs.flutter.dev/get-started/install) instalado na m√°quina
- [Git](https://git-scm.com/downloads)
- [Python 3.10+](https://www.python.org/downloads/) para o backend
- Editor recomendado: [VS Code](https://code.visualstudio.com/)

---

## Como clonar e rodar o projeto

1. **Clone o reposit√≥rio**

   ```bash
   git clone https://github.com/Joao-Henrique0/meu-tcc.git
   cd TCC
   ```

---

### Front-end (Flutter)

2. **Acesse a pasta do app**

   ```bash
   cd tcc_app
   ```

3. **Instale as depend√™ncias**

   ```bash
   flutter pub get
   ```

4. **Configure as vari√°veis de ambiente**

   Crie um arquivo `.env` na raiz da pasta `tcc_app` com o seguinte conte√∫do:

   ```properties
   SUPABASE_URL=coloque_aqui_o_url_do_supabase
   SUPABASE_ANON_KEY=coloque_aqui_o_anon_key_do_supabase
   ```

   > **Aten√ß√£o:** Nunca compartilhe sua chave `anonKey` publicamente.

5. **Execute o app**

   ```bash
   flutter run
   ```

---

### Back-end (Python)

> üí° O backend deve estar em execu√ß√£o para que os recursos do chatbot e NLP funcionem corretamente no app.

1. **Acesse a pasta do backend**

   ```bash
   cd ../back-end
   ```

2. **Crie e ative um ambiente virtual**

   ```bash
   python -m venv venv
   venv\Scripts\activate   # Windows
   # ou
   source venv/bin/activate   # Linux/macOS
   ```

3. **Instale as depend√™ncias**

   ```bash
   pip install -r requirements.txt
   ```

4. **Execute o backend**

    ```bash
    python main.py
    ```

---

## Estrutura do projeto

- `tcc_app/lib/` - C√≥digo principal do app Flutter
- `tcc_app/.env` - Vari√°veis de ambiente do front-end (n√£o versionado)
- `back-end/` - Backend Python

---

## Configura√ß√£o do Supabase

### 1. Criar projeto no Supabase

- Acesse [https://supabase.com/](https://supabase.com/) e crie uma conta.
- Crie um novo projeto.
- Copie o `SUPABASE_URL` e o `SUPABASE_ANON_KEY` para o arquivo `.env` do Flutter.

### 2. Habilitar autentica√ß√£o por e-mail e Google

- No painel do Supabase, v√° em **Authentication > Providers**.
- Ative o provedor **Email**.
- Ative o provedor **Google** e configure o Client ID e Client Secret do Google (voc√™ pode obter esses dados no [Google Cloud Console](https://console.cloud.google.com/)).
- Em **Authentication > Settings**, ajuste as configura√ß√µes conforme necess√°rio (ex: permitir cadastro, etc).

### 3. Criar tabela no Supabase

- No painel do Supabase, v√° em **Table Editor**.
- Clique em **New Table** e crie uma tabela, por exemplo, chamada `tasks` com os campos que desejar, por exemplo:

  - `id` (UUID, Primary Key)
  - `user_id` (UUID, refer√™ncia ao usu√°rio)
  - `title` (text)
  - `description` (text)
  - `created_at` (timestamp)

- Clique em **Save** para criar a tabela.

---
